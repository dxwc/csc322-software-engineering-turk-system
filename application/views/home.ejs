<!doctype html>

<head>
    <title>Home</title>
    <meta charset="UTF-8">
    <script src='axios.min.js'></script>
</head>

<body>

    <div id='authentication'>
        <div id='login' style='display: none'>
            <input
                id='l_user_name'
                type='text'
                placeholder='User name'
                required='required'><br>
            <input
                id='l_password'
                type='password'
                placeholder='Password'
                required='required'><br><br>
            <button
                id='l_button'
                type='button'
                style='display: inline'>Login</button><br>
            <div
                id='l_button_info'></div><br><br>
        </div>

        <div id='sign_up' style='display: none'>
            <input
                id='s_user_name'
                type='text'
                placeholder='User name'
                required='required'>
            <div
                id='s_user_name_info'
                style='display: inline'></div><br>
            <input
                id='s_password'
                type='password'
                placeholder='Password'
                required='required'>
            <div
                id='s_password_info'
                style='display: inline'></div><br>
            <input
                id='s_confirm_password'
                type='password'
                placeholder='Confirm password'
                required='required'>
            <div
                id='s_confirm_password_info'
                style='display: inline'></div><br>
            <input
                id='s_developer'
                type='radio'
                name='role'
                checked='checked'>Developer<br>
            <input
                id='s_client'
                type='radio'
                name='role'>Client<br>
            <input
                id='s_deposit'
                type='number'
                placeholder='Dollar to deposit'
                min='10' step='0.01'
                required='required'>
            <div
                id='s_deposit_info'
                style='display: inline'></div><br>
            <div
                id='s_deposit_summery'></div><br>
            <button
                id='s_button'
                type='button'
                style='display: inline'>Sign Up</button><br>
            <div
                id='s_button_info'></div><br><br>
        </div>

        <div id='login_signup'>
            <div
                id='open_login'>
                > <a href>Login</a> </div>
            <div
                id='open_sign_up'>
                > <a href>Sign Up</a> </div>
        </div>
    </div>



    <script>

//----------------

// DOM has finished loading
document.addEventListener('DOMContentLoaded', (event) =>
{
    // original source: https://stackoverflow.com/a/39899635
    // Creates a cutom event 'keystopped' that triggers with a delay after user
    // finishes typing on input field (wheras 'input' or similar event would trigger on
    // every little change)
    (function()
    {
        let keystoppedTimer = null;
        let keystoppedInputs = document.getElementsByTagName('input');
        for (let i = 0, l = keystoppedInputs.length; i < l; i++)
        {
            keystoppedInputs[i].addEventListener('input', function(event)
            {
                clearTimeout(keystoppedTimer);
                keystoppedTimer = setTimeout
                (
                    function() { event.target.dispatchEvent(new Event('keystopped')) },
                    600
                );
            }, false);
        }
    }());


    let login                   = document.getElementById('login');
    let l_user_name             = document.getElementById('l_user_name');
    let l_password              = document.getElementById('l_password');
    let l_button                = document.getElementById('l_button');
    let l_button_info           = document.getElementById('l_button_info');

    let sign_up                 = document.getElementById('sign_up');
    let s_user_name             = document.getElementById('s_user_name');
    let s_user_name_info        = document.getElementById('s_user_name_info');
    let s_password              = document.getElementById('s_password');
    let s_password_info         = document.getElementById('s_password_info');
    let s_confirm_password      = document.getElementById('s_confirm_password');
    let s_confirm_password_info = document.getElementById('s_confirm_password_info');
    let s_deposit               = document.getElementById('s_deposit');
    let s_deposit_info          = document.getElementById('s_deposit_info');
    let s_deposit_summery       = document.getElementById('s_deposit_summery');
    let s_button                = document.getElementById('s_button');
    let s_button_info           = document.getElementById('s_button_info');

    let open_login              = document.getElementById('open_login');
    let open_sign_up            = document.getElementById('open_sign_up');


    /**
     * Show error message on s_user_name.value:
     * - if first character is not a letter
     * - if usrname contains non alphanumeric characters
     * - if can not connect to server
     * - if server send error string
     * Otherwise:
     * - if server send boolean true : username available (unique)
     * - if server sends boolean false or string : username not available
     * */
    function check_username_uniqueness()
    {
        s_user_name.value = s_user_name.value.trim();
        if(s_user_name.value.length === 0)
        {
            s_user_name_info.innerHTML = '';
            return Promise.resolve('');
        }

        let a_to_z = 'abcdefghijklmnopqrstuvwxyz';
        let alpha_numeric = 'abcdefghijklmnopqrstuvwxyz1234567890';

        if(a_to_z.indexOf( `${s_user_name.value[0]}`.toLowerCase() ) === -1)
        {
            s_user_name_info.innerHTML = 'âœ— First character must be a letter';
            return Promise.resolve('âœ— First character must be a letter')
        }
        for(let i = 0; i < s_user_name.value.length; ++i)
        {
            if
            (
                alpha_numeric
                .indexOf(`${s_user_name.value[i]}`.toLocaleLowerCase()) === -1
            )
            {
                s_user_name_info.innerHTML =
                        'âœ— Invalid character \'' +
                        s_user_name.value[i] +
                        '\' at position ' + (i+1);
                return Promise.resolve
                (
                        'âœ— Invalid character \'' +
                        s_user_name.value[i] +
                        '\' at position ' + (i+1)
                );
            }
        }

        s_user_name_info.innerHTML = 'â†»';
        return axios.post
        (
            '/sign_up',
            { 'user_name_check' : s_user_name.value }
        )
        .then((result) =>
        {
            if(result.data === true)
            {
                s_user_name_info.innerHTML = 'âœ” Available';
                return true;
            }
            else if(result.data && result.data.length > 0)
            {
                s_user_name_info.innerHTML = `âœ— ${result.data}`;
                return `âœ— ${result.data}`;
            }
            else
            {
                s_user_name_info.innerHTML = 'âœ— Username taken';
                return 'âœ— Username taken';
            }
        })
        .catch((err) =>
        {
            console.log('Error:\n', err);
            s_user_name_info.innerHTML = 'âœ— Error checking uniqueness';
        });
    }

    /**
     * - Shows error message if password length is less than 5
     * - Shows error if passwords do no match
     * - If both conditions are satisfied sends boolean true, string err
     *   text otherwise
     * */
    function check_password()
    {
        if(s_password.value.length < 5)
        {
            s_password_info.innerHTML =
                'âœ— Password have to be more than 5 characters';
            s_confirm_password_info.innerHTML = 'ðŸ¡¡';
            return Promise.resolve('âœ— Password have to be more than 5 characters');
        }
        else
        {
            s_password_info.innerHTML = 'âœ” Valid password';
        }

        if(s_password.value === s_confirm_password.value)
        {
            s_confirm_password_info.innerHTML = 'âœ” Matching password';
            return Promise.resolve(true);
        }
        else
        {
            s_confirm_password_info.innerHTML = 'âœ— Password does not match';
            return Promise.resolve('âœ— Password does not match');
        }
    }

    /**
     * - Shows error message of deposit amount is less than $10
     * - On valid amount, show summery of amount with system charge and total
     *   amount of payment user will have to make
     * */
    function check_deposit()
    {
        return new Promise((resolve, reject) =>
        {
            if(s_deposit.value >= 10)
            {
                s_deposit_info.innerHTML = 'âœ” Valid amount';
                s_deposit_summery.innerHTML = `
                <ul>
                    <li>Your account balance will be
                        $${s_deposit.value} - transferred to your account</li>
                    <li>5% system charge :
                        $${Number(s_deposit.value*(0.05)).toFixed(2)}
                            - transferred to super user</li>
                    <li>You will have to pay a <b>total</b> of
                        <b>$${Number(
                            Number(s_deposit.value)+
                            Number(s_deposit.value*(0.05))).toFixed(2)}</b></li>
                </ul>
                `;
                resolve(true);
            }
            else
            {
                s_deposit_summery.innerHTML = '';
                s_deposit_info.innerHTML =
                'âœ— Deposit dollar amount must be a number >= 10';
                resolve('âœ— Deposit dollar amount must be a number >= 10');
            }
        });
    }

    s_user_name.addEventListener('keystopped', (event) =>
    {
        check_username_uniqueness();
    });

    s_password.addEventListener('keystopped', (event) =>
    {
        check_password();
    });

    s_confirm_password.addEventListener('keystopped', (event) =>
    {
        check_password();
    });

    s_deposit.addEventListener('keystopped', (event) =>
    {
        check_deposit();
    });

    open_login.addEventListener('click', (event) =>
    {
        event.preventDefault();

        sign_up.setAttribute('style', 'display : none');
        login.removeAttribute('style');

        open_login.setAttribute('style', 'display: none');
        open_sign_up.removeAttribute('style');
    });

    open_sign_up.addEventListener('click', (event) =>
    {
        event.preventDefault();

        login.setAttribute('style', 'display : none');
        sign_up.removeAttribute('style');

        open_sign_up.setAttribute('style', 'display: none');
        open_login.removeAttribute('style');
    });
});

//----------------

    </script>

</body>